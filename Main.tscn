[gd_scene load_steps=2 format=3 uid="uid://dfo4aealsw6va"]

[sub_resource type="GDScript" id="GDScript_rxg2q"]
resource_name = "Main"
script/source = "extends Control

@export var sample : Texture2D = preload(\"res://samples/City.png\")
@export var tile_size := Vector2i.ONE * 3

var sample_padded : Image
var sample_padded_tex : ImageTexture
var sample_size : Vector2i
var tiles : Array[Tile] = []

func _ready():
	var sample_image := sample.get_image()
	sample_size = Vector2i(sample.get_size())
	
	var padded_size := sample_size + tile_size - Vector2i.ONE
	
	sample_padded = Image.create_empty(padded_size.x, padded_size.y, false, sample_image.get_format())
	sample_padded.fill(Color.DEEP_PINK)
	
	var repeats := padded_size / sample_size + Vector2i.ONE
	
	for i in range(repeats.x):
		for j in range(repeats.y):
			sample_padded.blit_rect(sample_image,
				Rect2i(Vector2i.ZERO, sample_size),
				Vector2i(i * sample_size.x, j * sample_size.y))
				
	sample_padded_tex = ImageTexture.create_from_image(sample_padded)
	
	var total := sample_size.x * sample_size.y
	for j in range(sample_size.y):
		for i in range(sample_size.x):
			var idx := j * sample_size.x + i
			var tile := Tile.new(i, j, idx, sample_padded, tile_size, total)
			
			tiles.append(tile)
			
	# assert(tiles[0].overlaps(tiles[1], Tile.TILE_SIDE.WEST))
	# assert(tiles[1].overlaps(tiles[0], Tile.TILE_SIDE.EAST))
	
	# assert(not tiles[0].overlaps(tiles[2], Tile.TILE_SIDE.WEST))
	
	# assert(tiles[1].overlaps(tiles[2], Tile.TILE_SIDE.WEST))
	# assert(tiles[1].overlaps(tiles[3], Tile.TILE_SIDE.WEST))
	
	# assert(tiles[0].overlaps(tiles[sample_size.x], Tile.TILE_SIDE.SOUTH))
	# assert(not tiles[0].overlaps(tiles[sample_size.x+1], Tile.TILE_SIDE.SOUTH))
	# assert(tiles[sample_size.x].overlaps(tiles[0], Tile.TILE_SIDE.NORTH))
	
	for tile in tiles:
		tile.fill_neighbors(tiles)
	
	# print(tiles[0].neighbors[Tile.TILE_SIDE.WEST])
	# print(tiles[1].neighbors[Tile.TILE_SIDE.WEST])
	# print(tiles[sample_size.x * 2].neighbors[Tile.TILE_SIDE.WEST])

func _draw():
	var rid := get_canvas_item()
	var rect_size := Vector2.ONE * 100.
	
	draw_set_transform(Vector2(1000, 0))
	
	draw_texture_rect(sample, Rect2(Vector2.ZERO, rect_size), false)
	draw_texture_rect(sample_padded_tex, Rect2(Vector2(0, rect_size.y + 10.), rect_size), false)
	
	draw_set_transform(Vector2.ZERO)
	
	var gap = 5.
	rect_size = Vector2.ONE * 30.
	
	for tile in tiles:
		var i := tile.index
		var row = floor(i / sample_size.x)
		var col = i % sample_size.y
		var pos = Vector2((rect_size.x + gap) * col, (rect_size.y + gap) * row)
		
		tile.draw(rid, pos, rect_size)
	
func _process(delta):
	queue_redraw()

func get_sample_section(top_left: Vector2i, extents: Vector2i) -> Image:
	var img := sample_padded.get_region(Rect2i(top_left, extents))
	
	return img
"

[node name="Control" type="Control"]
texture_filter = 1
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_rxg2q")
